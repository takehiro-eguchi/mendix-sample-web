// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package myfirstmodule.proxies.microflows;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;

public final class Microflows
{
	/**
	 * Private constructor to prevent instantiation of this class. 
	 */
	private Microflows() {}

	// These are the microflows for the MyFirstModule module
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aggregateListBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.AggregateList");
		return builder;
	}

	public static void aggregateList(IContext context)
	{
		aggregateListBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder changeObjectBuilder(
		myfirstmodule.proxies.Status _status
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.ChangeObject");
		builder = builder.withParam("Status", _status == null ? null : _status.name());
		return builder;
	}

	public static void changeObject(
		IContext context,
		myfirstmodule.proxies.Status _status
	)
	{
		changeObjectBuilder(
				_status
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder commitSalesOrderBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.CommitSalesOrder");
		return builder;
	}

	public static void commitSalesOrder(IContext context)
	{
		commitSalesOrderBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder continueOrBreakBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.ContinueOrBreak");
		return builder;
	}

	public static void continueOrBreak(IContext context)
	{
		continueOrBreakBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder createObjectBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.CreateObject");
		return builder;
	}

	public static void createObject(IContext context)
	{
		createObjectBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder createSalesOrderDraftObjectBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.CreateSalesOrderDraftObject");
		return builder;
	}

	public static void createSalesOrderDraftObject(IContext context)
	{
		createSalesOrderDraftObjectBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder createVariableBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.CreateVariable");
		return builder;
	}

	public static void createVariable(IContext context)
	{
		createVariableBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder deleteObjectBuilder(
		myfirstmodule.proxies.Products _deleteProduct
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.DeleteObject");
		builder = builder.withParam("DeleteProduct", _deleteProduct);
		return builder;
	}

	public static void deleteObject(
		IContext context,
		myfirstmodule.proxies.Products _deleteProduct
	)
	{
		deleteObjectBuilder(
				_deleteProduct
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder ifStatementBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.IfStatement");
		return builder;
	}

	public static void ifStatement(IContext context)
	{
		ifStatementBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder listOperationBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.ListOperation");
		return builder;
	}

	public static void listOperation(IContext context)
	{
		listOperationBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder loopsBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.Loops");
		return builder;
	}

	public static void loops(IContext context)
	{
		loopsBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder mergeBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.Merge");
		return builder;
	}

	public static void merge(IContext context)
	{
		mergeBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder myFirstLogicBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.MyFirstLogic");
		return builder;
	}

	public static void myFirstLogic(IContext context)
	{
		myFirstLogicBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder retrieveBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.Retrieve");
		return builder;
	}

	public static void retrieve(IContext context)
	{
		retrieveBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sampleFlowBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.SampleFlow");
		return builder;
	}

	public static void sampleFlow(IContext context)
	{
		sampleFlowBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder testDateTimeToLongBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.TestDateTimeToLong");
		return builder;
	}

	public static void testDateTimeToLong(IContext context)
	{
		testDateTimeToLongBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder testMonthBetweenBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.TestMonthBetween");
		return builder;
	}

	public static void testMonthBetween(IContext context)
	{
		testMonthBetweenBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder xPathBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.XPath");
		return builder;
	}

	public static void xPath(IContext context)
	{
		xPathBuilder().execute(context);
	}
}
