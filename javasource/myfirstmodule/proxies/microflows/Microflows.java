// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package myfirstmodule.proxies.microflows;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;

public final class Microflows
{
	/**
	 * Private constructor to prevent instantiation of this class. 
	 */
	private Microflows() {}

	// These are the microflows for the MyFirstModule module
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder createSalesOrderDraftObjectBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.CreateSalesOrderDraftObject");
		return builder;
	}

	public static void createSalesOrderDraftObject(IContext context)
	{
		createSalesOrderDraftObjectBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder createVariableBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.CreateVariable");
		return builder;
	}

	public static void createVariable(IContext context)
	{
		createVariableBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder ifStatementBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.IfStatement");
		return builder;
	}

	public static void ifStatement(IContext context)
	{
		ifStatementBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder myFirstLogicBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.MyFirstLogic");
		return builder;
	}

	public static void myFirstLogic(IContext context)
	{
		myFirstLogicBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sampleFlowBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MyFirstModule.SampleFlow");
		return builder;
	}

	public static void sampleFlow(IContext context)
	{
		sampleFlowBuilder().execute(context);
	}
}
